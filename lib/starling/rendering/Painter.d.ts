import haxe_ds_ObjectMap from "./../../haxe/ds/ObjectMap";
import starling_utils_RenderUtil from "./../../starling/utils/RenderUtil";
import starling_utils_SystemUtil from "./../../starling/utils/SystemUtil";
import Std from "./../../Std";
import starling_rendering_RenderState from "./../../starling/rendering/RenderState";
import starling_utils_MatrixUtil from "./../../starling/utils/MatrixUtil";
import js__$Boot_HaxeError from "./../../js/_Boot/HaxeError";
import openfl_errors_IllegalOperationError from "openfl/errors/IllegalOperationError";
import starling_utils_RectangleUtil from "./../../starling/utils/RectangleUtil";
import openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ from "./../../openfl/display3D/_Context3DCompareMode/Context3DCompareMode_Impl_";
import starling_utils_Pool from "./../../starling/utils/Pool";
import openfl_errors_Error from "openfl/errors/Error";
import starling_display_Quad from "./../../starling/display/Quad";
import starling_utils_MathUtil from "./../../starling/utils/MathUtil";
import _$UInt_UInt_$Impl_$ from "./../../_UInt/UInt_Impl_";
import starling_display_BlendMode from "./../../starling/display/BlendMode";
import openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ from "./../../openfl/display3D/_Context3DTriangleFace/Context3DTriangleFace_Impl_";
import haxe_ds_StringMap from "./../../haxe/ds/StringMap";
import openfl_geom_Matrix from "openfl/geom/Matrix";
import openfl_geom_Vector3D from "openfl/geom/Vector3D";
import openfl_geom_Matrix3D from "openfl/geom/Matrix3D";
import openfl_geom_Rectangle from "openfl/geom/Rectangle";
import starling_utils_MeshSubset from "./../../starling/utils/MeshSubset";
import openfl_utils__$Dictionary_Dictionary_$Impl_$ from "./../../openfl/utils/_Dictionary/Dictionary_Impl_";
import openfl_Vector from "openfl/Vector";
import starling_rendering_BatchProcessor from "./../../starling/rendering/BatchProcessor";

declare namespace starling.rendering {

export class Painter {

	constructor(stage3D:any);
	_stage3D:any;
	_context:any;
	_shareContext:any;
	_drawCount:any;
	_frameID:any;
	_pixelSize:any;
	_enableErrorChecking:any;
	_stencilReferenceValues:any;
	_clipRectStack:any;
	_batchCacheExclusions:any;
	_batchProcessor:any;
	_batchProcessorCurr:any;
	_batchProcessorPrev:any;
	_batchProcessorSpec:any;
	_actualRenderTarget:any;
	_actualRenderTargetOptions:any;
	_actualCulling:any;
	_actualBlendMode:any;
	_actualDepthMask:any;
	_actualDepthTest:any;
	_backBufferWidth:any;
	_backBufferHeight:any;
	_backBufferScaleFactor:any;
	_state:any;
	_stateStack:any;
	_stateStackPos:any;
	_stateStackLength:any;
	dispose():any;
	requestContext3D(renderMode:any, profile:any):any;
	onContextCreated(event:any):any;
	configureBackBuffer(viewPort:any, contentScaleFactor:any, antiAlias:any, enableDepthAndStencil:any):any;
	registerProgram(name:any, program:any):any;
	deleteProgram(name:any):any;
	getProgram(name:any):any;
	hasProgram(name:any):any;
	pushState(token?:any):any;
	setStateTo(transformationMatrix:any, alphaFactor?:any, blendMode?:any):any;
	popState(token?:any):any;
	restoreState():any;
	fillToken(token:any):any;
	drawMask(mask:any, maskee?:any):any;
	eraseMask(mask:any, maskee?:any):any;
	renderMask(mask:any):any;
	pushClipRect(clipRect:any):any;
	popClipRect():any;
	isRectangularMask(mask:any, maskee:any, out:any):any;
	batchMesh(mesh:any, subset?:any):any;
	finishMeshBatch():any;
	finishFrame():any;
	processCacheExclusions():any;
	setupContextDefaults():any;
	nextFrame():any;
	swapBatchProcessors():any;
	drawFromCache(startToken:any, endToken:any):any;
	excludeFromCache(object:any):any;
	drawBatch(meshBatch:any):any;
	prepareToDraw():any;
	clear(rgb?:any, alpha?:any):any;
	present():any;
	applyBlendMode():any;
	applyCulling():any;
	applyDepthTest():any;
	applyRenderTarget():any;
	applyClipRect():any;
	drawCount:any;
	get_drawCount():any;
	set_drawCount(value:any):any;
	stencilReferenceValue:any;
	get_stencilReferenceValue():any;
	set_stencilReferenceValue(value:any):any;
	cacheEnabled:any;
	get_cacheEnabled():any;
	set_cacheEnabled(value:any):any;
	state:any;
	get_state():any;
	stage3D:any;
	get_stage3D():any;
	context:any;
	get_context():any;
	frameID:any;
	set_frameID(value:any):any;
	get_frameID():any;
	pixelSize:any;
	get_pixelSize():any;
	set_pixelSize(value:any):any;
	shareContext:any;
	get_shareContext():any;
	set_shareContext(value:any):any;
	enableErrorChecking:any;
	get_enableErrorChecking():any;
	set_enableErrorChecking(value:any):any;
	backBufferWidth:any;
	get_backBufferWidth():any;
	backBufferHeight:any;
	get_backBufferHeight():any;
	backBufferScaleFactor:any;
	get_backBufferScaleFactor():any;
	contextValid:any;
	get_contextValid():any;
	profile:any;
	get_profile():any;
	sharedData:any;
	get_sharedData():any;
	programs:any;
	get_programs():any;
	static PROGRAM_DATA_NAME:any;
	static DEFAULT_STENCIL_VALUE:any;
	static sSharedData:any;
	static sMatrix:any;
	static sPoint3D:any;
	static sMatrix3D:any;
	static sClipRect:any;
	static sBufferRect:any;
	static sScissorRect:any;
	static sMeshSubset:any;


}

}

export default starling.rendering.Painter;