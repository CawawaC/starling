import starling_events_EventDispatcher from "./../../starling/events/EventDispatcher";
import openfl_Vector from "openfl/Vector";
import starling_utils_ArrayUtil from "./../../starling/utils/ArrayUtil";
import haxe_ds_StringMap from "./../../haxe/ds/StringMap";
import Std from "./../../Std";
import openfl_net_URLRequest from "openfl/net/URLRequest";
import Type from "./../../Type";
import js__$Boot_HaxeError from "./../../js/_Boot/HaxeError";
import openfl_errors_ArgumentError from "openfl/errors/ArgumentError";
import starling_core_Starling from "./../../starling/core/Starling";
import openfl_errors_Error from "openfl/errors/Error";
import haxe_Timer from "./../../haxe/Timer";
import starling_textures_TextureAtlas from "./../../starling/textures/TextureAtlas";
import starling_text_TextField from "./../../starling/text/TextField";
import starling_text_BitmapFont from "./../../starling/text/BitmapFont";
import openfl_media_Sound from "openfl/media/Sound";
import Xml from "./../../Xml";
import openfl_display_Bitmap from "openfl/display/Bitmap";
import starling_textures_Texture from "./../../starling/textures/Texture";
import js_Boot from "./../../js/Boot";
import openfl_utils_ByteArray from "openfl/utils/ByteArray";
import starling_textures_AtfData from "./../../starling/textures/AtfData";
import EReg from "./../../EReg";
import openfl_system_LoaderContext from "openfl/system/LoaderContext";
import openfl_display_Loader from "openfl/display/Loader";
import openfl_net_URLLoader from "openfl/net/URLLoader";
import haxe_Log from "./../../haxe/Log";
import HxOverrides from "./../../HxOverrides";
import openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ from "./../../openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_";
import starling_textures_TextureOptions from "./../../starling/textures/TextureOptions";

declare namespace starling.utils {

export class AssetManager extends starling_events_EventDispatcher {

	constructor(scaleFactor?:any, useMipmaps?:any);
	__starling:any;
	__numLostTextures:any;
	__numRestoredTextures:any;
	__numLoadingQueues:any;
	__defaultTextureOptions:any;
	__checkPolicyFile:any;
	__keepAtlasXmls:any;
	__keepFontXmls:any;
	__numConnections:any;
	__verbose:any;
	__queue:any;
	__textures:any;
	__atlases:any;
	__sounds:any;
	__xmls:any;
	__objects:any;
	__byteArrays:any;
	dispose():any;
	getTexture(name:any):any;
	getTextures(prefix?:any, out?:any):any;
	getTextureNames(prefix?:any, out?:any):any;
	getTextureAtlas(name:any):any;
	getTextureAtlasNames(prefix?:any, out?:any):any;
	getSound(name:any):any;
	getSoundNames(prefix?:any, out?:any):any;
	playSound(name:any, startTime?:any, loops?:any, transform?:any):any;
	getXml(name:any):any;
	getXmlNames(prefix?:any, out?:any):any;
	getObject(name:any):any;
	getObjectNames(prefix?:any, out?:any):any;
	getByteArray(name:any):any;
	getByteArrayNames(prefix?:any, out?:any):any;
	addTexture(name:any, texture:any):any;
	addTextureAtlas(name:any, atlas:any):any;
	addSound(name:any, sound:any):any;
	addXml(name:any, xml:any):any;
	addObject(name:any, object:any):any;
	addByteArray(name:any, byteArray:any):any;
	removeTexture(name:any, dispose?:any):any;
	removeTextureAtlas(name:any, dispose?:any):any;
	removeSound(name:any):any;
	removeXml(name:any, dispose?:any):any;
	removeObject(name:any):any;
	removeByteArray(name:any, dispose?:any):any;
	purgeQueue():any;
	purge():any;
	enqueue(rawAssets:any):any;
	enqueueWithName(asset:any, name?:any, options?:any):any;
	loadQueue(onProgress:any):any;
	processRawAsset(name:any, rawAsset:any, options:any, xmls:any, onProgress:any, onComplete:any):any;
	loadRawAsset(rawAsset:any, onProgress:any, onComplete:any):any;
	getName(rawAsset:any):any;
	transformData(data:any, url:any):any;
	log(message:any):any;
	byteArrayStartsWith(bytes:any, char:any):any;
	getDictionaryKeys(dictionary:any, prefix?:any, out?:any):any;
	getHttpHeader(headers:any, headerName:any):any;
	getBasenameFromUrl(url:any):any;
	getExtensionFromUrl(url:any):any;
	prependCallback(oldCallback:any, newCallback:any):any;
	compare(a:any, b:any):any;
	queue:any;
	get_queue():any;
	nu__queuedAssets:any;
	get_nu__queuedAssets():any;
	verbose:any;
	get_verbose():any;
	set_verbose(value:any):any;
	isLoading:any;
	get_isLoading():any;
	useMipMaps:any;
	get_useMipMaps():any;
	set_useMipMaps(value:any):any;
	scaleFactor:any;
	get_scaleFactor():any;
	set_scaleFactor(value:any):any;
	textureFormat:any;
	get_textureFormat():any;
	set_textureFormat(value:any):any;
	forcePotTextures:any;
	get_forcePotTextures():any;
	set_forcePotTextures(value:any):any;
	checkPolicyFile:any;
	get_checkPolicyFile():any;
	set_checkPolicyFile(value:any):any;
	keepAtlasXmls:any;
	get_keepAtlasXmls():any;
	set_keepAtlasXmls(value:any):any;
	keepFontXmls:any;
	get_keepFontXmls():any;
	set_keepFontXmls(value:any):any;
	numConnections:any;
	get_numConnections():any;
	set_numConnections(value:any):any;
	static HTTP_RESPONSE_STATUS:any;
	static sNames:any;
	static NAME_REGEX:any;


}

}

export default starling.utils.AssetManager;