import starling_events_EventDispatcher from "./../../starling/events/EventDispatcher";
import openfl_geom_Matrix from "openfl/geom/Matrix";
import js__$Boot_HaxeError from "./../../js/_Boot/HaxeError";
import starling_errors_AbstractMethodError from "./../../starling/errors/AbstractMethodError";
import openfl_geom_Point from "openfl/geom/Point";
import starling_utils_MatrixUtil from "./../../starling/utils/MatrixUtil";
import starling_utils_MathUtil from "./../../starling/utils/MathUtil";
import openfl_errors_ArgumentError from "openfl/errors/ArgumentError";
import starling_core_Starling from "./../../starling/core/Starling";
import Std from "./../../Std";
import starling_display_Stage from "./../../starling/display/Stage";
import openfl_display_BitmapData from "openfl/display/BitmapData";
import starling_utils_Color from "./../../starling/utils/Color";
import openfl_geom_Matrix3D from "openfl/geom/Matrix3D";
import openfl_errors_IllegalOperationError from "openfl/errors/IllegalOperationError";
import openfl_ui_Mouse from "openfl/ui/Mouse";
import starling_utils_SystemUtil from "./../../starling/utils/SystemUtil";
import haxe_Log from "./../../haxe/Log";
import openfl_Vector from "openfl/Vector";
import openfl_geom_Vector3D from "openfl/geom/Vector3D";
import openfl_geom_Rectangle from "openfl/geom/Rectangle";
import starling_rendering_BatchToken from "./../../starling/rendering/BatchToken";

declare namespace starling.display {

export class DisplayObject extends starling_events_EventDispatcher {

	constructor();
	__x:any;
	__y:any;
	__pivotX:any;
	__pivotY:any;
	__scaleX:any;
	__scaleY:any;
	__skewX:any;
	__skewY:any;
	__rotation:any;
	__alpha:any;
	__visible:any;
	__touchable:any;
	__blendMode:any;
	__name:any;
	__useHandCursor:any;
	__transformationMatrix:any;
	__transformationMatrix3D:any;
	__transformationChanged:any;
	__is3D:any;
	__maskee:any;
	__maskInverted:any;
	__parent:any;
	__lastParentOrSelfChangeFrameID:any;
	__lastChildChangeFrameID:any;
	__tokenFrameID:any;
	__pushToken:any;
	__popToken:any;
	__hasVisibleArea:any;
	__filter:any;
	__mask:any;
	dispose():any;
	removeFromParent(dispose?:any):any;
	getTransformationMatrix(targetSpace:any, out?:any):any;
	getBounds(targetSpace:any, out?:any):any;
	hitTest(localPoint:any):any;
	hitTestMask(localPoint:any):any;
	localToGlobal(localPoint:any, out?:any):any;
	globalToLocal(globalPoint:any, out?:any):any;
	render(painter:any):any;
	alignPivot(horizontalAlign?:any, verticalAlign?:any):any;
	drawToBitmapData(out?:any, color?:any, alpha?:any):any;
	getTransformationMatrix3D(targetSpace:any, out?:any):any;
	local3DToGlobal(localPoint:any, out?:any):any;
	globalToLocal3D(globalPoint:any, out?:any):any;
	__setParent(value:any):any;
	__setIs3D(value:any):any;
	isMask:any;
	get_isMask():any;
	setRequiresRedraw():any;
	requiresRedraw:any;
	get_requiresRedraw():any;
	excludeFromCache():any;
	__setTransformationChanged():any;
	__updateTransformationMatrices(x:any, y:any, pivotX:any, pivotY:any, scaleX:any, scaleY:any, skewX:any, skewY:any, rotation:any, out:any, out3D:any):any;
	dispatchEvent(event:any):any;
	addEventListener(type:any, listener:any):any;
	removeEventListener(type:any, listener:any):any;
	removeEventListeners(type?:any):any;
	__addEnterFrameListenerToStage(e?:any):any;
	__removeEnterFrameListenerFromStage(e?:any):any;
	transformationMatrix:any;
	get_transformationMatrix():any;
	set_transformationMatrix(matrix:any):any;
	transformationMatrix3D:any;
	get_transformationMatrix3D():any;
	is3D:any;
	get_is3D():any;
	useHandCursor:any;
	get_useHandCursor():any;
	set_useHandCursor(value:any):any;
	__onTouch(event:any):any;
	bounds:any;
	get_bounds():any;
	width:any;
	get_width():any;
	set_width(value:any):any;
	height:any;
	get_height():any;
	set_height(value:any):any;
	x:any;
	get_x():any;
	set_x(value:any):any;
	y:any;
	get_y():any;
	set_y(value:any):any;
	pivotX:any;
	get_pivotX():any;
	set_pivotX(value:any):any;
	pivotY:any;
	get_pivotY():any;
	set_pivotY(value:any):any;
	scaleX:any;
	get_scaleX():any;
	set_scaleX(value:any):any;
	scaleY:any;
	get_scaleY():any;
	set_scaleY(value:any):any;
	scale:any;
	get_scale():any;
	set_scale(value:any):any;
	skewX:any;
	get_skewX():any;
	set_skewX(value:any):any;
	skewY:any;
	get_skewY():any;
	set_skewY(value:any):any;
	rotation:any;
	get_rotation():any;
	set_rotation(value:any):any;
	isRotated:any;
	get_isRotated():any;
	alpha:any;
	get_alpha():any;
	set_alpha(value:any):any;
	visible:any;
	get_visible():any;
	set_visible(value:any):any;
	touchable:any;
	get_touchable():any;
	set_touchable(value:any):any;
	blendMode:any;
	get_blendMode():any;
	set_blendMode(value:any):any;
	name:any;
	get_name():any;
	set_name(value:any):any;
	filter:any;
	get_filter():any;
	set_filter(value:any):any;
	mask:any;
	get_mask():any;
	set_mask(value:any):any;
	maskInverted:any;
	get_maskInverted():any;
	set_maskInverted(value:any):any;
	parent:any;
	get_parent():any;
	base:any;
	get_base():any;
	root:any;
	get_root():any;
	stage:any;
	get_stage():any;
	static sAncestors:any;
	static sHelperPoint:any;
	static sHelperPoint3D:any;
	static sHelperPointAlt3D:any;
	static sHelperRect:any;
	static sHelperMatrix:any;
	static sHelperMatrixAlt:any;
	static sHelperMatrix3D:any;
	static sHelperMatrixAlt3D:any;
	static sMaskWarningShown:any;
	static __findCommonParent(object1:any, object2:any):any;


}

}

export default starling.display.DisplayObject;